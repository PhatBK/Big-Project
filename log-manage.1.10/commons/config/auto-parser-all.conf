input {
  file {
    path => "E:/Viettel-VAS/6.5.3/log-manage.1.15/cron_tasks/all-data/kenh-hai/*.txt"
    start_position => "beginning"
    type=>"all-in-one-raw"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>5000
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 10000
  }
  file {
    path => "E:/Viettel-VAS/6.5.3/log-manage.1.15/cron_tasks/all-data/kenh-hai/*.txt"
    start_position => "beginning"
    type=>"all-in-one-parser"
    stat_interval=>30
    discover_interval=>30
    max_open_files=>5000
    exclude => [ "*.tar", "*.tar.gz", "*.zip" ]
    ignore_older => 10000
  }

}
filter {
    if [type] == "all-in-one-parser" {
        grok {
            match => { "message" => "%{WORD:serviceToken} %{WORD:serviceName} %{WORD:serviceType} %{WORD:userID} %{NUMBER:mediaID} %{QS:mediaName} %{QS:mediaCategory} %{QS:http_user_agent} %{QS:errorMessage} %{IP:ipPublic} %{IP:ipPrivate} %{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?%{ISO8601_TIMEZONE:timezone}? %{WORD:connectType} %{NUMBER:bitrateNetwork} %{NUMBER:seekCount} %{NUMBER:pauseCount} %{NUMBER:bufferCount} %{NUMBER:suspendCount} %{NUMBER:initialLoadTime} %{NUMBER:mediaDuration} %{NUMBER:watchedDuration} %{NUMBER:bufferDuration} %{NUMBER:errorCode}" }
        }
        mutate {
            convert => {
            "mediaID" => "integer"
            "bitrateNetwork" => "float"
            "mediaDuration" => "integer"
            "seekCount" => "integer"
            "pauseCount" => "integer"
            "bufferCount" => "integer"
            "suspendCount" => "integer"
            "initialLoadTime" => "float"
            "watchedDuration" => "integer"
            "bufferDuration" => "float"
            "currentTime" => "integer"
            "watchingTime" => "integer"
            "errorCode" => "integer"
            }
        }
        geoip {
            source => "ipPublic"
            target => "geoip"
            add_tag => [ "client-geoip" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
            add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
        }
        mutate {
            convert => [ "[geoip][coordinates]", "float" ]
        }
        date {
            #match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            match => [ "timestamp" , "YYYY-MMM-dd:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }
        useragent {
            source => "http_user_agent"
        }
        if "_grokparsefailure" in [tags] {
            drop {}
        }
    }
}

output {

    if [type] == "all-in-one-raw" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "all-in-one-raw"
        }
    }
    if [type] == "all-in-one-parser" {
        elasticsearch {
            hosts => ["127.0.0.1:9200"] 
            index => "all-in-one-parser"
        }
    }
}
